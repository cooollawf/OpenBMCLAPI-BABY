import { FactoryProvider, Inject, Type } from '@nestjs/common';
import { ModuleMetadata } from '@nestjs/common/interfaces';
import { ServerVariableObject } from '@nestjs/swagger/dist/interfaces/open-api-spec.interface';
import { Constructor } from './index';
export declare const ApiSummary: (summary: string) => MethodDecorator;
interface IGenerateSwaggerOptions {
    title?: string;
    description?: string;
    version?: string;
    prefix?: string;
    outputPath?: string;
    servers?: {
        url: string;
        description?: string;
        variables?: Record<string, ServerVariableObject>;
    }[];
}
export declare function generateSwagger(appModule: any, options?: IGenerateSwaggerOptions): Promise<void>;
export declare function setDefaultPageLimit(limit: number): void;
export declare function getDefaultPageLimit(): number;
export declare class PagedDto {
    page: number;
    limit: number;
    get skip(): number;
    set skip(value: number);
}
export declare class SortablePagedDto extends PagedDto {
    sort?: string;
}
export declare class IdDto {
    id: string;
}
export interface PagedResDto<T> {
    count: number;
    data: T[];
}
export declare function PagedResDto<T extends Constructor>(constructor: T): Constructor<PagedResDto<T>>;
export declare function ApiFile(fileName?: string): MethodDecorator;
export type DynamicModuleOptions<T> = Omit<FactoryProvider<T>, 'provide'> & {
    imports?: ModuleMetadata['imports'];
};
export declare function IntParam(name: string): ParameterDecorator;
export declare function InjectRef<T>(fn: () => Type<T>): ReturnType<typeof Inject>;
type ServiceErrorDefinition = Record<string, readonly [message: string, httpCode?: number]>;
/**
 * Api错误响应装饰器
 * @param errors 错误定义
 * @param code 错误码
 * @param message 错误信息
 * @param description 描述
 * @example @ApiError(ServiceErrors, 'COMMON_NO_SUCH_OBJECT', '找不到对象')
 */
export declare function ApiError<T extends ServiceErrorDefinition>(errors: T, code: keyof T, message?: string, description?: string | undefined): MethodDecorator & ClassDecorator;
export {};
