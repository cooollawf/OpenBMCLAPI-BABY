"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toggleEnumBit = exports.toggleBit = exports.clearBitEnum = exports.clearBit = exports.setBitEnum = exports.setBit = exports.isBitEnumNotSet = exports.isBitNotSet = exports.isBitEnumSet = exports.isBitSet = void 0;
/**
 * 比特位是否设置
 * @param num
 * @param bit **位数**
 */
function isBitSet(num, bit) {
    return (num >> bit) % 2 !== 0;
}
exports.isBitSet = isBitSet;
/**
 * 比特位是否设置
 * @param num
 * @param bit **值**
 */
function isBitEnumSet(num, bit) {
    return (num & bit) !== 0;
}
exports.isBitEnumSet = isBitEnumSet;
/**
 * 比特位是否未设置
 * @param num
 * @param bit **位数**
 */
function isBitNotSet(num, bit) {
    return (num >> bit) % 2 === 0;
}
exports.isBitNotSet = isBitNotSet;
/**
 * 比特位是否未设置
 * @param num
 * @param bit **值**
 */
function isBitEnumNotSet(num, bit) {
    return (num & bit) === 0;
}
exports.isBitEnumNotSet = isBitEnumNotSet;
/**
 * 设置比特位
 * @param num
 * @param bit **位数**
 */
function setBit(num, bit) {
    return num | 1 << bit;
}
exports.setBit = setBit;
/**
 * 设置比特位
 * @param num
 * @param bit **值**
 */
function setBitEnum(num, bit) {
    return num | bit;
}
exports.setBitEnum = setBitEnum;
/**
 * 清除比特位
 * @param num
 * @param bit **位数**
 */
function clearBit(num, bit) {
    return num & ~(1 << bit);
}
exports.clearBit = clearBit;
/**
 * 清除比特位
 * @param num
 * @param bit **值**
 */
function clearBitEnum(num, bit) {
    return num & ~bit;
}
exports.clearBitEnum = clearBitEnum;
/**
 * 反转比特位
 * @param num
 * @param bit **位数**
 */
function toggleBit(num, bit) {
    return num ^ 1 << bit;
}
exports.toggleBit = toggleBit;
/**
 * 反转比特位
 * @param num
 * @param bit **值**
 */
function toggleEnumBit(num, bit) {
    return num ^ bit;
}
exports.toggleEnumBit = toggleEnumBit;
//# sourceMappingURL=bitwise.js.map