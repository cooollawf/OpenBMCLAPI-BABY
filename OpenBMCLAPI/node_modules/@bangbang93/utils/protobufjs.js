"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.unwrapPagedDto = exports.applyWrappers = void 0;
const protobufjs_1 = require("protobufjs");
function applyWrappers(w = protobufjs_1.wrappers) {
    w['.google.protobuf.Timestamp'] = {
        fromObject(date) {
            if (typeof date === 'string') {
                date = new Date(date);
            }
            if (date instanceof Date) {
                return this.create({
                    seconds: new protobufjs_1.util.Long(Math.round(date.valueOf() / 1000)),
                    nanos: date.valueOf() % 1000,
                });
            }
            throw new Error('Invalid date');
        },
        toObject(message) {
            const seconds = typeof message.seconds === 'number' ? message.seconds : message.seconds?.toNumber() ?? 0;
            return new Date(seconds * 1000 + (message.nanos ?? 0));
        },
    };
    const _toObject = w['.google.protobuf.Any'].toObject;
    w['.google.protobuf.Any'].toObject = function toObject(message, options) {
        const msg = _toObject?.call(this, message, options);
        if (msg) {
            delete msg['@type'];
        }
        return msg ?? {};
    };
    protobufjs_1.util.Long.prototype.toJSON = function toJSON() {
        const number = this.toNumber();
        if (number >= Number.MIN_SAFE_INTEGER && number <= Number.MAX_SAFE_INTEGER) {
            return this.toNumber();
        }
        else {
            return this.toString();
        }
    };
}
exports.applyWrappers = applyWrappers;
function unwrapPagedDto(data) {
    return {
        count: data.count ?? 0,
        data: data.data ?? [],
    };
}
exports.unwrapPagedDto = unwrapPagedDto;
//# sourceMappingURL=protobufjs.js.map