"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseRpcService = void 0;
const service_errors_1 = require("@bangbang93/service-errors");
const grpc_js_1 = require("@grpc/grpc-js");
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const is_1 = __importDefault(require("@sindresorhus/is"));
const class_transformer_1 = require("class-transformer");
const os_1 = require("os");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
/**
 * GrpcService的基类, 用于封装grpc调用.
 * 1. 通过`@Inject('SERVICE_NAME')`注入grpc client
 * 2. 将protobufjs生成的Promise based api转换为RxJS based api
 * 3. 为请求的metadata添加`x-req-node`字段
 */
class BaseRpcService {
    constructor(serviceName) {
        this.serviceName = serviceName;
    }
    get service() {
        return this._service;
    }
    onModuleInit() {
        const rawService = this.moduleRef.get(`GRPC-${this.serviceName}`).getService(this.serviceName);
        this._service = new Proxy(rawService, {
            get: (target, propKey) => {
                if (!is_1.default.string(propKey))
                    return rawService[propKey];
                if (!(propKey in rawService))
                    return undefined;
                const prop = rawService[propKey];
                if (is_1.default.function_(prop)) {
                    return (data, metadata) => {
                        metadata ??= new grpc_js_1.Metadata();
                        metadata.set('x-req-node', (0, os_1.hostname)());
                        const res$ = prop.call(rawService, data, metadata);
                        return res$.pipe((0, operators_1.catchError)((err) => {
                            let parsedError = err;
                            if (err['code'] === 2 && err['details']) {
                                try {
                                    const json = JSON.parse(err['details']);
                                    if (json.$isServiceError) {
                                        parsedError = (0, class_transformer_1.plainToInstance)(service_errors_1.ServiceError, json);
                                    }
                                    else {
                                        parsedError = service_errors_1.createError.COMMON_UNKNOWN(json.message, { causedBy: err });
                                    }
                                }
                                catch (e) {
                                    let detail = err['details'];
                                    try {
                                        detail = JSON.parse(err['details']);
                                        if (detail.$isServiceError) {
                                            detail = (0, class_transformer_1.plainToInstance)(service_errors_1.ServiceError, detail);
                                        }
                                    }
                                    catch (e) { /* ignore */ }
                                    if (detail instanceof service_errors_1.ServiceError) {
                                        throw detail;
                                    }
                                    else {
                                        throw service_errors_1.createError.COMMON_UNKNOWN(detail.message, { causedBy: detail });
                                    }
                                }
                            }
                            if (parsedError instanceof service_errors_1.ServiceError) {
                                throw parsedError;
                            }
                            throw service_errors_1.createError.COMMON_UNKNOWN(parsedError.message, {
                                service: this.serviceName,
                                method: propKey,
                                data,
                                metadata,
                                causedBy: parsedError,
                            });
                        }));
                    };
                }
                return prop;
            },
        });
    }
    requiredPaged(data) {
        return data.pipe((0, rxjs_1.map)((e) => ({
            count: e.count ?? 0,
            data: e.data ?? [],
        })));
    }
}
__decorate([
    (0, common_1.Inject)(),
    __metadata("design:type", core_1.ModuleRef)
], BaseRpcService.prototype, "moduleRef", void 0);
exports.BaseRpcService = BaseRpcService;
//# sourceMappingURL=base-rpc-service.js.map