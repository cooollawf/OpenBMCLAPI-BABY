"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpExceptionFilter = void 0;
const service_errors_1 = require("@bangbang93/service-errors");
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const bunyan_1 = require("bunyan");
const class_transformer_1 = require("class-transformer");
const json_stringify_safe_1 = __importDefault(require("json-stringify-safe"));
const lodash_1 = require("lodash");
const nestjs_bunyan_1 = require("nestjs-bunyan");
const verror_1 = require("verror");
const Logger = require("bunyan");
let HttpExceptionFilter = class HttpExceptionFilter {
    constructor(configServiceOrEnv) {
        if (configServiceOrEnv) {
            if (typeof configServiceOrEnv === 'string') {
                this.env = configServiceOrEnv;
            }
            else {
                this.env = configServiceOrEnv.get('NODE_ENV', 'development');
            }
        }
    }
    onModuleInit() {
        this.logger.addSerializers(bunyan_1.stdSerializers);
    }
    catch(err, host) {
        const ctx = host.switchToHttp();
        const req = ctx.getRequest();
        const res = ctx.getResponse();
        if (err instanceof common_1.HttpException) {
            const data = err.getResponse();
            const childError = new service_errors_1.ServiceError('COMMON_UNKNOWN', '未知错误', {
                httpCode: err.getStatus(),
                causedBy: err,
                ...typeof data === 'string' ? {} : data,
            });
            return this.catch(childError, host);
        }
        if (err['code'] === 2 && err['details']) {
            try {
                const json = JSON.parse(err['details']);
                if (json.$isServiceError) {
                    err = (0, class_transformer_1.plainToInstance)(service_errors_1.ServiceError, json);
                }
                else {
                    err = service_errors_1.createError.COMMON_UNKNOWN(json.message, { causedBy: err });
                }
            }
            catch (e) {
                return this.catch(service_errors_1.createError.COMMON_UNKNOWN(err['details'], { causedBy: err }), host);
            }
            return this.catch(err, host);
        }
        if (!(err instanceof service_errors_1.ServiceError)) {
            const childError = service_errors_1.ServiceError.fromError(err);
            return this.catch(childError, host);
        }
        const resp = this.getResponse(err);
        const status = this.getHttpCode(err);
        if (status === common_1.HttpStatus.INTERNAL_SERVER_ERROR) {
            this.logger.error({
                err,
                reqId: req['id'],
                req: {
                    method: req.method,
                    url: req.originalUrl || req.url,
                    remoteAddress: req.socket.remoteAddress,
                    remotePort: req.socket.remotePort,
                    body: req.body,
                },
            });
        }
        else {
            this.logger.debug({
                err,
                reqId: req['id'],
                req: {
                    method: req.method,
                    url: req.originalUrl || req.url,
                    remoteAddress: req.socket.remoteAddress,
                    remotePort: req.socket.remotePort,
                    body: req.body,
                },
            });
        }
        if (res.headersSent)
            return;
        res.status(status)
            .type('json')
            .end(resp);
    }
    getResponse(err) {
        if (err instanceof service_errors_1.ServiceError) {
            const data = err.toJSON();
            if (this.env?.toLowerCase() !== 'production') {
                return (0, json_stringify_safe_1.default)(data);
            }
            else {
                return (0, json_stringify_safe_1.default)(data, omitStack);
            }
        }
        if (err instanceof verror_1.VError) {
            const info = verror_1.VError.info(err);
            if (this.env?.toLowerCase() !== 'production') {
                return (0, json_stringify_safe_1.default)({
                    ...(0, lodash_1.pick)(err, 'message', 'name', 'stack'),
                    ...info,
                });
            }
            else {
                return (0, json_stringify_safe_1.default)({
                    ...(0, lodash_1.pick)(err, 'message', 'name'),
                    ...info,
                }, omitStack);
            }
        }
        else {
            if (this.env?.toLowerCase() !== 'production') {
                return (0, json_stringify_safe_1.default)({
                    ...(0, lodash_1.pick)(err, 'message', 'name', 'stack'),
                    ...err,
                });
            }
            else {
                return (0, json_stringify_safe_1.default)({
                    ...(0, lodash_1.pick)(err, 'message', 'name'),
                    ...(0, lodash_1.omit)(err, 'stack'),
                }, omitStack);
            }
        }
    }
    getHttpCode(err) {
        if (err instanceof service_errors_1.ServiceError) {
            return err.httpCode ?? common_1.HttpStatus.INTERNAL_SERVER_ERROR;
        }
        else if (err instanceof common_1.HttpException) {
            return err.getStatus();
        }
        else {
            return err['httpCode'] ?? err['status'] ?? err['statusCode'] ?? common_1.HttpStatus.INTERNAL_SERVER_ERROR;
        }
    }
};
__decorate([
    (0, nestjs_bunyan_1.InjectLogger)(),
    __metadata("design:type", Logger)
], HttpExceptionFilter.prototype, "logger", void 0);
HttpExceptionFilter = __decorate([
    (0, common_1.Catch)(),
    __param(0, (0, common_1.Inject)(config_1.ConfigService)),
    __metadata("design:paramtypes", [Object])
], HttpExceptionFilter);
exports.HttpExceptionFilter = HttpExceptionFilter;
function omitStack(key, value) {
    if (key === 'stack')
        return undefined;
    return value;
}
//# sourceMappingURL=http-exception.filter.js.map