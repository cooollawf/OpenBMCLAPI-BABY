"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcExceptionFilter = void 0;
const service_errors_1 = require("@bangbang93/service-errors");
const grpc_js_1 = require("@grpc/grpc-js");
const common_1 = require("@nestjs/common");
const microservices_1 = require("@nestjs/microservices");
const bunyan_1 = require("bunyan");
const class_transformer_1 = require("class-transformer");
const nestjs_bunyan_1 = require("nestjs-bunyan");
const os_1 = require("os");
const rxjs_1 = require("rxjs");
const Logger = require("bunyan");
/**
 * GRPC异常过滤器
 */
let GrpcExceptionFilter = class GrpcExceptionFilter {
    catch(err, host) {
        const [data, reqMetadata, call] = host.getArgs();
        try {
            const metadata = new grpc_js_1.Metadata();
            metadata.set('x-req-node', (0, os_1.hostname)());
            if (err instanceof service_errors_1.ServiceError) {
                this.logger.error({
                    err,
                    message: err.message,
                    stack: err.stack,
                    data,
                    client: call?.getPeer(),
                    metadata: reqMetadata,
                });
                return (0, rxjs_1.throwError)(() => ({
                    message: JSON.stringify(err),
                    metadata,
                }));
            }
            else if (err instanceof microservices_1.RpcException) {
                const error = err.getError();
                if (typeof error === 'string') {
                    return this.catch(service_errors_1.createError.COMMON_UNKNOWN(error), host);
                }
                else {
                    return this.catch(error, host);
                }
            }
            else if (err['code'] === 2 && err['details']) {
                // is nested rpc error
                try {
                    const json = JSON.parse(err['details']);
                    if (json.$isServiceError) {
                        err = (0, class_transformer_1.plainToInstance)(service_errors_1.ServiceError, json);
                    }
                    else {
                        err = service_errors_1.createError.COMMON_UNKNOWN(json.message, { causedBy: err });
                    }
                }
                catch (e) {
                    return this.catch(service_errors_1.createError.COMMON_UNKNOWN(err['details'], { causedBy: err }), host);
                }
                return this.catch(err, host);
            }
            else {
                let serviceError;
                if (err instanceof common_1.HttpException) {
                    serviceError = new service_errors_1.ServiceError('COMMON_UNKNOWN', err.message, {
                        causedBy: err,
                        httpCode: err.getStatus(),
                    });
                }
                else {
                    serviceError = service_errors_1.ServiceError.fromError(err);
                }
                return this.catch(serviceError, host);
            }
        }
        catch (err) {
            const serviceError = service_errors_1.ServiceError.fromError(err);
            return this.catch(serviceError, host);
        }
    }
    onModuleInit() {
        this.logger.addSerializers({
            err: bunyan_1.stdSerializers.err,
        });
    }
};
__decorate([
    (0, nestjs_bunyan_1.InjectLogger)(),
    __metadata("design:type", Logger)
], GrpcExceptionFilter.prototype, "logger", void 0);
GrpcExceptionFilter = __decorate([
    (0, common_1.Catch)()
], GrpcExceptionFilter);
exports.GrpcExceptionFilter = GrpcExceptionFilter;
//# sourceMappingURL=grpc-exception.filter.js.map