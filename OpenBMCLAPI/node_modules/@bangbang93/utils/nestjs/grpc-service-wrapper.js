"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.grpcServiceWrapper = void 0;
const service_errors_1 = require("@bangbang93/service-errors");
const grpc_js_1 = require("@grpc/grpc-js");
const is_1 = __importDefault(require("@sindresorhus/is"));
const class_transformer_1 = require("class-transformer");
const os_1 = require("os");
const rxjs_1 = require("rxjs");
function grpcServiceWrapper(rawService) {
    return new Proxy(rawService, {
        get: (target, propKey) => {
            if (!is_1.default.string(propKey))
                return rawService[propKey];
            if (!(propKey in rawService))
                return undefined;
            const prop = rawService[propKey];
            if (is_1.default.function_(prop)) {
                return (data, metadata, ...rest) => {
                    metadata ??= new grpc_js_1.Metadata();
                    metadata.set('x-req-node', (0, os_1.hostname)());
                    const res$ = prop.call(rawService, data, metadata, ...rest);
                    return res$.pipe((0, rxjs_1.catchError)((err) => {
                        let parsedError;
                        if (err['code'] === 2 && err['details']) {
                            try {
                                const json = JSON.parse(err['details']);
                                if (json.$isServiceError) {
                                    parsedError = (0, class_transformer_1.plainToInstance)(service_errors_1.ServiceError, json);
                                }
                                else {
                                    parsedError = service_errors_1.createError.COMMON_UNKNOWN(json.message, { causedBy: err });
                                }
                            }
                            catch (e) {
                                let detail = err['details'];
                                try {
                                    detail = JSON.parse(err['details']);
                                    if (detail.$isServiceError) {
                                        detail = (0, class_transformer_1.plainToInstance)(service_errors_1.ServiceError, detail);
                                    }
                                }
                                catch (e) { /* ignore */ }
                                if (detail instanceof service_errors_1.ServiceError) {
                                    throw detail;
                                }
                                else {
                                    throw service_errors_1.createError.COMMON_UNKNOWN(detail.message, { causedBy: detail });
                                }
                            }
                        }
                        else {
                            parsedError = service_errors_1.createError.COMMON_UNKNOWN(err.message, { causedBy: err });
                        }
                        throw new service_errors_1.ServiceError(parsedError.code, '', {
                            causedBy: parsedError,
                            httpCode: parsedError.httpCode,
                            service: rawService.constructor.name,
                            method: propKey,
                            data,
                            metadata,
                        });
                    }));
                };
            }
            return prop;
        },
    });
}
exports.grpcServiceWrapper = grpcServiceWrapper;
//# sourceMappingURL=grpc-service-wrapper.js.map