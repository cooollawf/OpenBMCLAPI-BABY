"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClassValidationPipe = void 0;
const service_errors_1 = require("@bangbang93/service-errors");
const common_1 = require("@nestjs/common");
/**
 * 比起 NestJS 默认的 ValidationPipe，这个 ValidationPipe 会将错误信息转换为 ServiceErrors
 */
let ClassValidationPipe = class ClassValidationPipe extends common_1.ValidationPipe {
    constructor(options) {
        super({
            transform: true,
            whitelist: true,
            transformOptions: {
                enableImplicitConversion: true,
            },
            exceptionFactory: (errors) => {
                const msgs = this.flattenValidationErrors(errors);
                return service_errors_1.createError.COMMON_INVALID_PARAMETER(msgs.join());
            },
            ...options,
        });
    }
};
ClassValidationPipe = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [Object])
], ClassValidationPipe);
exports.ClassValidationPipe = ClassValidationPipe;
//# sourceMappingURL=class-validation.pipe.js.map