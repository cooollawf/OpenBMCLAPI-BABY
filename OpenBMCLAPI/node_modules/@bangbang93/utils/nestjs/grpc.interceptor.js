"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcInterceptor = void 0;
const grpc_js_1 = require("@grpc/grpc-js");
const common_1 = require("@nestjs/common");
const Logger = __importStar(require("bunyan"));
const lodash_1 = require("lodash");
const nestjs_bunyan_1 = require("nestjs-bunyan");
const os_1 = require("os");
const operators_1 = require("rxjs/operators");
const util_1 = require("util");
let GrpcInterceptor = class GrpcInterceptor {
    intercept(context, next) {
        if (context.getType() !== 'rpc') {
            return next.handle();
        }
        const [data, reqMetadata, call] = context.getArgs();
        const start = new Date();
        const metadata = new grpc_js_1.Metadata();
        metadata.set('x-req-node', (0, os_1.hostname)());
        const reqId = (0, lodash_1.first)(reqMetadata.get('x-request-id'));
        const reqNode = (0, lodash_1.first)(reqMetadata.get('x-req-node'));
        reqId && metadata.set('x-request-id', reqId);
        const handler = `${context.getClass().name}.${context.getHandler().name}`;
        const res$ = next.handle()
            .pipe((0, operators_1.share)());
        res$.pipe((0, operators_1.toArray)())
            .subscribe({
            next: (result) => {
                call.sendMetadata(metadata);
                const end = new Date();
                const duration = end.valueOf() - start.valueOf();
                if (this.logger.trace()) {
                    const r = (0, util_1.inspect)(result, { depth: Infinity });
                    this.logger.trace({ start, end, duration, data, metadata: { req: reqMetadata, res: metadata }, result: r,
                        handler, reqNode });
                }
                else {
                    this.logger.info({ handler, duration, reqNode });
                }
            },
            error: (err) => {
                call.sendMetadata(metadata);
                const end = new Date();
                const duration = end.valueOf() - start.valueOf();
                if (this.logger.trace()) {
                    this.logger.trace(err, { start, end, duration, data, metadata: { req: reqMetadata, res: metadata }, handler,
                        reqNode });
                }
                else {
                    this.logger.info(err, { handler, duration, reqNode });
                }
            },
        });
        return res$;
    }
};
__decorate([
    (0, nestjs_bunyan_1.InjectLogger)(),
    __metadata("design:type", Object)
], GrpcInterceptor.prototype, "logger", void 0);
GrpcInterceptor = __decorate([
    (0, common_1.Injectable)()
], GrpcInterceptor);
exports.GrpcInterceptor = GrpcInterceptor;
//# sourceMappingURL=grpc.interceptor.js.map