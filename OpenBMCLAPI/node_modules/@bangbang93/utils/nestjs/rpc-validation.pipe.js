"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcValidationPipe = exports.ValidationOptions = void 0;
const common_1 = require("@nestjs/common");
const microservices_1 = require("@nestjs/microservices");
exports.ValidationOptions = Symbol('validation-options');
const defaultOptions = {
    transform: true,
    transformOptions: {
        enableImplicitConversion: true,
    },
    whitelist: true,
};
let RpcValidationPipe = class RpcValidationPipe extends common_1.ValidationPipe {
    constructor(options = defaultOptions) {
        if (!options)
            options = defaultOptions;
        super({
            exceptionFactory: createExceptionFactory(),
            ...options,
        });
    }
};
RpcValidationPipe = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, common_1.Optional)()),
    __param(0, (0, common_1.Inject)(exports.ValidationOptions)),
    __metadata("design:paramtypes", [Object])
], RpcValidationPipe);
exports.RpcValidationPipe = RpcValidationPipe;
function createExceptionFactory() {
    return (validationErrors = []) => {
        const errors = flattenValidationErrors(validationErrors);
        return new microservices_1.RpcException(errors.join());
    };
}
function flattenValidationErrors(validationErrors) {
    return (0, common_1.flatten)((0, common_1.flatten)(validationErrors
        .map((error) => mapChildrenToValidationErrors(error)))
        .filter((item) => !!item.constraints)
        .map((item) => item.constraints ? Object.values(item.constraints) : []));
}
function mapChildrenToValidationErrors(error) {
    if (!error.children?.length) {
        return [error];
    }
    const validationErrors = [];
    for (const item of error.children) {
        if (item.children?.length) {
            validationErrors.push(...mapChildrenToValidationErrors(item));
        }
        validationErrors.push(prependConstraintsWithParentProp(error, item));
    }
    return validationErrors;
}
function prependConstraintsWithParentProp(parentError, error) {
    const constraints = {};
    for (const key in error.constraints) {
        constraints[key] = `${parentError.property}.${error.constraints[key]}`;
    }
    return {
        ...error,
        constraints,
    };
}
//# sourceMappingURL=rpc-validation.pipe.js.map